{
  "name": "net-snmp",
  "version": "1.1.19",
  "description": "JavaScript implementation of the Simple Network Management Protocol (SNMP)",
  "main": "index.js",
  "directories": {
    "example": "example"
  },
  "dependencies": {
    "asn1": "*"
  },
  "contributors": [
    {
      "name": "Stephen Vickers",
      "email": "stephen.vickers.sv@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/stephenwvickers/node-net-snmp.git"
  },
  "keywords": [
    "snmp",
    "snmpv1",
    "snmpv2",
    "snmpv2c",
    "net",
    "network",
    "mon",
    "monitor",
    "monitoring"
  ],
  "author": {
    "name": "Stephen Vickers",
    "email": "stephen.vickers.sv@gmail.com"
  },
  "license": "MIT",
  "readme": "\n# net-snmp\n\nThis module implements version 1 and 2c of the [Simple Network Management\nProtocol (SNMP)][SNMP].\n\nThis module is installed using [node package manager (npm)][npm]:\n\n    npm install net-snmp\n\nIt is loaded using the `require()` function:\n\n    var snmp = require (\"net-snmp\");\n\nSessions to remote hosts can then be created and used to perform SNMP requests\nand send SNMP traps or informs:\n\n    var session = snmp.createSession (\"127.0.0.1\", \"public\");\n\n    var oids = [\"1.3.6.1.2.1.1.5.0\", \"1.3.6.1.2.1.1.6.0\"];\n    \n    session.get (oids, function (error, varbinds) {\n        if (error) {\n            console.error (error);\n        } else {\n            for (var i = 0; i < varbinds.length; i++)\n                if (snmp.isVarbindError (varbinds[i]))\n                    console.error (snmp.varbindError (varbinds[i]))\n                else\n                    console.log (varbinds[i].oid + \" = \" + varbinds[i].value);\n        }\n    });\n\n    session.trap (snmp.TrapType.LinkDown, function (error) {\n        if (error)\n            console.error (error);\n    });\n\n[SNMP]: http://en.wikipedia.org/wiki/Simple_Network_Management_Protocol \"SNMP\"\n[npm]: https://npmjs.org/ \"npm\"\n\n# Standards Compliance\n\nThis module aims to be fully compliant with the following RFCs:\n\n * [1155][1155] - Structure and Identification of Management Information\n * [1098][1098] - A Simple Network Management Protocol (version 1)\n * [2578][2578] - Structure of Management Information Version 2 (SMIv2)\n * [3416][3416] - Simple Network Management Protocol (SNMP) (version 2c)\n\nHowever, this module does not implement, or export any method that might help\nto implement, the SNMP version 2c report request type.\n\n[1155]: https://tools.ietf.org/rfc/rfc1155.txt \"RFC 1155\"\n[1098]: https://tools.ietf.org/rfc/rfc1098.txt \"RFC 1098\"\n[2578]: https://tools.ietf.org/rfc/rfc2578.txt \"RFC 2578\"\n[3416]: https://tools.ietf.org/rfc/rfc3416.txt \"RFC 3416\"\n\n# Constants\n\nThe following sections describe constants exported and used by this module.\n\n## snmp.Version1 & snmp.Version2c\n\nThese constants are used to specify which of the two versions supported by\nthis module should be used.\n\n## snmp.ErrorStatus\n\nThis object contains constants for all valid values the error-status field in\nresponse PDUs can hold.  If when parsing a PDU the error-index field contains\na value not defined in this object the constant `snmp.ErrorStatus.GeneralError`\nwill be used instead of the value in the error-status field.  The following\nconstants are defined in this object:\n\n * `NoError`\n * `TooBig`\n * `NoSuchName`\n * `BadValue`\n * `ReadOnly`\n * `GeneralError`\n * `NoAccess`\n * `WrongType`\n * `WrongLength`\n * `WrongEncoding`\n * `WrongValue`\n * `NoCreation`\n * `InconsistentValue`\n * `ResourceUnavailable`\n * `CommitFailed`\n * `UndoFailed`\n * `AuthorizationError`\n * `NotWritable`\n * `InconsistentName`\n\n## snmp.ObjectType\n\nThis object contains constants used to specify syntax for varbind objects,\ne.g.:\n\n    var varbind = {\n        oid: \"1.3.6.1.2.1.1.4.0\",\n        type: snmp.ObjectType.OctetString,\n        value: \"user.name@domain.name\"\n    };\n\nThe following constants are defined in this object:\n\n * `Boolean`\n * `Integer`\n * `OctetString`\n * `Null`\n * `OID`\n * `IpAddress`\n * `Counter`\n * `Gauge`\n * `TimeTicks`\n * `Opaque`\n * `Integer32`\n * `Counter32`\n * `Gauge32`\n * `Unsigned32`\n * `Counter64`\n * `NoSuchObject`\n * `NoSuchInstance`\n * `EndOfMibView`\n\n## snmp.TrapType\n\nThis object contains constants used to specify a type of SNMP trap.  These\nconstants are passed to the `trap()` and `inform()` methods exposed by the\n`Session` class.  The following constants are defined in this object:\n\n * `ColdStart`\n * `WarmStart`\n * `LinkDown`\n * `LinkUp`\n * `AuthenticationFailure`\n * `EgpNeighborLoss`\n * `EnterpriseSpecific`\n\n# OID Strings & Varbinds\n\nSome parts of this module accept simple OID strings, e.g.:\n\n    var oid = \"1.3.6.1.2.1.1.5.0\";\n\nOther parts take an OID string, it's type and value.  This is collectively\nreferred to as a varbind, and is specified as an object, e.g.:\n\n    var varbind = {\n        oid: \"1.3.6.1.2.1.1.5.0\",\n        type: snmp.ObjectType.OctetString,\n        value: new Buffer (\"host1\")\n    };\n\nThe `type` parameter is one of the constants defined in the `snmp.ObjectType`\nobject.\n\nThe JavaScript `true` and `false` keywords are used for the values of varbinds\nwith type `Boolean`.\n\nAll integer based types are specified as expected (this includes `Integer`,\n`Counter`, `Gauge`, `TimeTicks`, `Integer32`, `Counter32`, `Gauge32`, and\n`Unsigned32`), e.g. `-128` or `100`.\n\nSince JavaScript does not offer full 64 bit integer support objects with type\n`Counter64` cannot be supported in the same way as other integer types,\ninstead [Node.js][nodejs] `Buffer` objects are used.  Users are responsible for\nproducing (i.e. for `set()` requests) and consuming (i.e. the varbinds passed\nto callback functions) `Buffer` objects.  That is, this module does not work\nwith 64 bit integers, it simply treats them as opaque `Buffer` objects.\n\nDotted decimal strings are used for the values of varbinds with type `OID`,\ne.g. `1.3.6.1.2.1.1.5.0`.\n\nDotted quad formatted strings are used for the values of varbinds with type\n`IpAddress`, e.g. `192.168.1.1`.\n\n[Node.js][nodejs] `Buffer` objects are used for the values of varbinds with\ntype `Opaque` and `OctetString`.  For varbinds with type `OctetString` this\nmodule will accept JavaScript strings, but will always give back `Buffer`\nobjects.\n\nThe `NoSuchObject`, `NoSuchInstance` and `EndOfMibView` types are used to\nindicate an error condition.  Currently there is no reason for users of this\nmodule to to build varbinds using these types.\n\n[nodejs]: http://nodejs.org \"Node.js\"\n\n# Callback Functions & Error Handling\n\nMost of the request methods exposed by this module require a mandatory\ncallback function.  This function is called once a request has been processed.\nThis could be because an error occurred when processing the request, a trap\nhas been dispatched or a successful response was received.\n\nThe first parameter to every callback is an error object.  In the case no\nerror occurred this parameter will be \"null\" indicating no error, e.g.:\n\n    function responseCb (error, varbinds) {\n        if (error) {\n            console.error (error);\n        } else {\n            // no error, do something with varbinds\n        }\n    }\n\nWhen defined, the error parameter is always an instance of the `Error` class,\nor a sub-class described in one of the sub-sections contained in this section.\n\nThe semantics of error handling is slightly different between SNMP version\n1 and 2c.  In SNMP version 1 if an error occurs when calculating the value for\none OID the request as a whole will fail, i.e. no OIDs will have a value.\n\nThis failure manifests itself within the error-status and error-index fields\nof the response.  When the error-status field in the response is non-zero,\ni.e. not `snmp.ErrorStatus.NoError` the `callback` will be called with `error`\ndefined detailing the error.\n\nRequests made with SNMP version 1 can simply assume all OIDs have a value when\nno error object is passed to the `callback`, i.e.:\n\n    var oids = [\"1.3.6.1.2.1.1.5.0\", \"1.3.6.1.2.1.1.6.0\"];\n    \n    session.get (oids, function (error, varbinds) {\n        if (error) {\n            console.error (error.toString ());\n        } else {\n            var sysName = varbinds[0].value; // this WILL have a value\n        }\n    });\n\nIn SNMP version 2c instead of using the error-status and error-index fields of\nthe response to signal an error, the value for the varbind placed in the\nresponse for an OID will have an object syntax describing an error.  The\nerror-status and error-index fields of the response will indicate the request\nwas successul, i.e. `snmp.ErrorStatus.NoError`.\n\nThis changes the way in which error checking is performed in the `callback`.\nWhen using SNMP version 2c each varbind must be checked to see if its value\nwas computed and returned successfully:\n\n    var oids = [\"1.3.6.1.2.1.1.5.0\", \"1.3.6.1.2.1.1.6.0\"];\n    \n    session.get (oids, function (error, varbinds) {\n        if (error) {\n            console.error (error.toString ());\n        } else {\n            if (varbinds[0].type != snmp.ErrorStatus.NoSuchObject\n                    && varbinds[0].type != snmp.ErrorStatus.NoSuchInstance\n                    && varbinds[0].type != snmp.ErrorStatus.EndOfMibView) {\n                var sysName = varbinds[0].value;\n            } else {\n                console.error (snmp.ObjectType[varbinds[0].type] + \": \"\n                        + varbinds[0].oid);\n            }\n        }\n    });\n\nThis module exports two functions and promotes a specifc pattern to make error\nchecking a little simpler.  Firstly, regardless of version in use varbinds can\nalways be checked.  This results in a generic `callback` that can be used for\nboth versions.\n\nThe `isVarbindError()` function can be used to determine if a varbind has an\nerror condition.  This function takes a single `varbind` parameter and returns\n`true` if the varbind has an error condition, otherwise `false`.  The exported\n`varbindError()` function can then be used to obtain the error string\ndescribing the error, which will include the OID for the varbind:\n\n    session.get (oids, function (error, varbinds) {\n        if (error) {\n            console.error (error.toString ());\n        } else {\n            if (snmp.isVarbindError (varbinds[0])) {\n                console.error (snmp.varbindError (varbinds[0]));\n            } else {\n                var sysName = varbinds[0].value;\n            }\n        }\n    });\n\nIf the `varbindError` function is called with a varbind for which\n`isVarbindError` would return false, the string `NotAnError` will be returned\nappended with the related OID.\n\nThe sections following defines the error classes used by this module.\n\n## snmp.RequestFailedError\n\nThis error indicates a remote host failed to process a request.  The exposed\n`message` attribute will contain a detailed error message.  This error also\nexposes a `status` attribute which contains the error-index value from a\nresponse.  This will be one of the constants defined in the\n`snmp.ErrorStatus` object.\n\n## snmp.RequestInvalidError\n\nThis error indicates a failure to render a request message before it could be\nsent.  The error can also indicate that a parameter provided was invalid.\nThe exposed `message` attribute will contain a detailed error message.\n\n## snmp.RequestTimedOutError\n\nThis error states that no response was received for a particular request.  The\nexposed `message` attribute will contain the value `Request timed out`.\n\n## snmp.ResponseInvalidError\n\nThis error indicates a failure to parse a response message.  The exposed\n`message` attribute will contain a detailed error message.\n\n# Using This Module\n\nAll SNMP requests are made using an instance of the `Session` class.  This\nmodule exports the `createSession()` function which is used to create\ninstances of the `Session` class.\n\n## snmp.createSession ([target], [community], [options])\n\nThe `createSession()` function instantiates and returns an instance of the\n`Session` class:\n\n    // Default options\n    var options = {\n        port: 161,\n        retries: 1,\n        timeout: 5000,\n        transport: \"udp4\",\n        trapPort: 162,\n        version: snmp.Version1\n    };\n    \n    var session = snmp.createSession (\"127.0.0.1\", \"public\", options);\n\nThe optional `target` parameter defaults to `127.0.0.1`.  The optional\n`community` parameter defaults to `public`.  The optional `options` parameter\nis an object, and can contain the following items:\n\n\n * `port` - UDP port to send requests too, defaults to `161`\n * `retries` - Number of times to re-send a request, defaults to `1`\n * `sourceAddress` - IP address from which SNMP requests should originate,\n   there is no default for this option, the operating system will select an\n   appropriate source address when the SNMP request is sent\n * `sourcePort` - UDP port from which SNMP requests should originate, defaults\n   to an ephemeral port selected by the operation system\n * `timeout` - Number of milliseconds to wait for a response before re-trying\n   or failing, defaults to `5000`\n * `transport` - Specify the transport to use, can be either `udp4` or `udp6`,\n   defaults to `udp4`\n * `trapPort` - UDP port to send traps and informs too, defaults to `162`\n * `version` - Either `snmp.Version1` or `snmp.Version2c`, defaults to\n   `snmp.Version1`\n\n## session.on (\"close\", callback)\n\nThe `close` event is emitted by the session when the sessions underlying UDP\nsocket is closed.\n\nNo arguments are passed to the callback.\n\nBefore this event is emitted all outstanding requests are cancelled, resulting\nin the failure of each outstanding request.  The error passed back through to\neach request will be an instance of the `Error` class with the errors\n`message` attribute set to `Socket forcibly closed`.\n\nThe following example prints a message to the console when a sessions\nunderlying UDP socket is closed:\n\n    session.on (\"close\", function () {\n        console.log (\"socket closed\");\n    });\n\n## session.on (\"error\", callback)\n\nThe `error` event is emitted by the session when the sessions underlying UDP\nsocket emits an error.\n\nThe following arguments will be passed to the `callback` function:\n\n * `error` - An instance of the `Error` class, the exposed `message` attribute\n   will contain a detailed error message.\n\nThe following example prints a message to the console when an error occurs\nwith a sessions underlying UDP socket, the session is then closed:\n\n    session.on (\"error\", function (error) {\n        console.log (error.toString ());\n        session.close ();\n    });\n\n## session.close ()\n\nThe `close()` method closes the sessions underlying UDP socket.  This will\nresult in the `close` event being emitted by the sessions underlying UDP\nsocket which is passed through to the session, resulting in the session also\nemitting a `close` event.\n\nThe following example closes a sessions underlying UDP socket:\n\n    session.close ();\n\n## session.get (oids, callback)\n\nThe `get()` method fetches the value for one or more OIDs.\n\nThe `oids` parameter is an array of OID strings.  The `callback` function is\ncalled once the request is complete.  The following arguments will be passed\nto the `callback` function:\n\n * `error` - Instance of the `Error` class or a sub-class, or `null` if no\n   error occurred\n * `varbinds` - Array of varbinds, will not be provided if an error occurred\n\nThe varbind in position N in the `varbinds` array will correspond to the OID\nin position N in the `oids` array in the request.\n\nEach varbind must be checked for an error condition using the\n`snmp.isVarbindError()` function when using SNMP version 2c.\n\nThe following example fetches values for the sysName (`1.3.6.1.2.1.1.5.0`) and\nsysLocation (`1.3.6.1.2.1.1.6.0`) OIDs:\n\n    var oids = [\"1.3.6.1.2.1.1.5.0\", \"1.3.6.1.2.1.1.6.0\"];\n    \n    session.get (oids, function (error, varbinds) {\n        if (error) {\n            console.error (error.toString ());\n        } else {\n            for (var i = 0; i < varbinds.length; i++) {\n                // for version 1 we can assume all OIDs were successful\n                console.log (varbinds[i].oid + \"|\" + varbinds[i].value);\n            \n                // for version 2c we must check each OID for an error condition\n                if (snmp.isVarbindError (varbinds[i]))\n                    console.error (snmp.varbindError (varbinds[i]));\n                else\n                    console.log (varbinds[i].oid + \"|\" + varbinds[i].value);\n            }\n        }\n    });\n\n## session.getBulk (oids, [nonRepeaters], [maxRepetitions], callback)\n\nThe `getBulk()` method fetches the value for the OIDs lexicographically\nfollowing one or more OIDs in the MIB tree.\n\nThe `oids` parameter is an array of OID strings.  The optional `nonRepeaters`\nparameter specifies the number of OIDs in the `oids` parameter for which only\n1 varbind should be returned, and defaults to `0`.  For each remaining OID\nin the `oids` parameter the optional `maxRepetitions` parameter specifies how\nmany OIDs lexicographically following an OID for which varbinds should be\nfetched, and defaults to `20`.\n\nThe `callback` function is called once the request is complete.  The following\narguments will be passed to the `callback` function:\n\n * `error` - Instance of the `Error` class or a sub-class, or `null` if no\n   error occurred\n * `varbinds` - Array of varbinds, will not be provided if an error occurred\n\nThe varbind in position N in the `varbinds` array will correspond to the OID\nin position N in the `oids` array in the request.\n\nFor for the first `nonRepeaters` items in `varbinds` each item will be a\nsingle varbind.  For all remaining items in `varbinds` each item will be an\narray of varbinds - this makes it easy to tie response varbinds with requested\nOIDs since response varbinds are grouped and placed in the same position in\n`varbinds`.\n\nEach varbind must be checked for an error condition using the\n`snmp.isVarbindError()` function when using SNMP version 2c.\n\nThe following example fetches values for the OIDs following the sysContact\n(`1.3.6.1.2.1.1.4.0`) and sysName (`1.3.6.1.2.1.1.5.0`) OIDs, and up to the\nfirst 20 OIDs in the ifDescr (`1.3.6.1.2.1.2.2.1.2`) and ifType\n(`1.3.6.1.2.1.2.2.1.3`) columns from the ifTable (`1.3.6.1.2.1.2.2`) table:\n\n    var oids = [\n        \"1.3.6.1.2.1.1.4.0\",\n        \"1.3.6.1.2.1.1.5.0\",\n        \"1.3.6.1.2.1.2.2.1.2\",\n        \"1.3.6.1.2.1.2.2.1.3\"\n    ];\n    \n    var nonRepeaters = 2;\n    \n    session.getNext (oids, nonRepeaters, function (error, varbinds) {\n        if (error) {\n            console.error (error.toString ());\n        } else {\n            // step through the non-repeaters which are single varbinds\n            for (var i = 0; i < nonRepeaters; i++) {\n                if (i >= varbinds.length)\n                    break;\n\n                if (snmp.isVarbindError (varbinds[i]))\n                    console.error (snmp.varbindError (varbinds[i]));\n                else\n                    console.log (varbinds[i].oid + \"|\" + varbinds[i].value);\n            }\n\n            // then step through the repeaters which are varbind arrays\n            for (var i = nonRepeaters; i < varbinds.length; i++) {\n                for (var j = 0; j < varbinds[i].length; j++) {\n                    if (snmp.isVarbindError (varbinds[i][j]))\n                        console.error (snmp.varbindError (varbinds[i][j]));\n                    else\n                        console.log (varbinds[i][j].oid + \"|\"\n                        \t\t+ varbinds[i][j].value);\n                }\n        }\n    });\n\n## session.getNext (oids, callback)\n\nThe `getNext()` method fetches the value for the OIDs lexicographically\nfollowing one or more OIDs in the MIB tree.\n\nThe `oids` parameter is an array of OID strings.  The `callback` function is\ncalled once the request is complete.  The following arguments will be passed\nto the `callback` function:\n\n * `error` - Instance of the `Error` class or a sub-class, or `null` if no\n   error occurred\n * `varbinds` - Array of varbinds, will not be provided if an error occurred\n\nThe varbind in position N in the `varbinds` array will correspond to the OID\nin position N in the `oids` array in the request.\n\nEach varbind must be checked for an error condition using the\n`snmp.isVarbindError()` function when using SNMP version 2c.\n\nThe following example fetches values for the next OIDs following the\nsysObjectID (`1.3.6.1.2.1.1.1.0`) and sysName (`1.3.6.1.2.1.1.4.0`) OIDs:\n\n    var oids = [\n        \"1.3.6.1.2.1.1.1.0\",\n        \"1.3.6.1.2.1.1.4.0\"\n    ];\n    \n    session.getNext (oids, function (error, varbinds) {\n        if (error) {\n            console.error (error.toString ());\n        } else {\n            for (var i = 0; i < varbinds.length; i++) {\n                // for version 1 we can assume all OIDs were successful\n                console.log (varbinds[i].oid + \"|\" + varbinds[i].value);\n            \n                // for version 2c we must check each OID for an error condition\n                if (snmp.isVarbindError (varbinds[i]))\n                    console.error (snmp.varbindError (varbinds[i]));\n                else\n                    console.log (varbinds[i].oid + \"|\" + varbinds[i].value);\n            }\n        }\n    });\n\n## session.inform (typeOrOid, [varbinds], [options], callback)\n\nThe `inform()` method sends a SNMP inform.\n\nThe `typeOrOid` parameter can be one of two types; one of the constants\ndefined in the `snmp.TrapType` object (excluding the\n`snmp.TrapType.EnterpriseSpecific` constant), or an OID string.\n\nThe first varbind to be placed in the request message will be for the\n`sysUptime.0` OID (`1.3.6.1.6.3.1.1.4.1.0`).  The value for this varbind will\nbe the value returned by the `process.uptime ()` function multiplied by 100\n(this can be overridden by providing `upTime` in the optional `options`\nparameter, as documented below).\n\nThis will be followed by a second varbind for the `snmpTrapOID.0` OID\n(`1.3.6.1.6.3.1.1.4.1.0`).  The value for this will depend on the `typeOrOid`\nparameter. If a constant is specified the trap OID for the constant will be\nused as supplied for the varbinds value, otherwise the OID string specified\nwill be used as is for the value of the varbind.\n\nThe optional `varbinds` parameter is an array of varbinds to include in the\ninform request, and defaults to the empty array `[]`.\n\nThe optional `options` parameter is an object, and can contain the following\nitems:\n\n * `upTime` - Value of the `sysUptime.0` OID (`1.3.6.1.6.3.1.1.4.1.0`) in the\n   inform, defaults to the value returned by the `process.uptime ()` function\n   multiplied by 100\n\nThe `callback` function is called once a response to the inform request has\nbeen received, or an error occurred.  The following arguments will be passed\nto the `callback` function:\n\n * `error` - Instance of the `Error` class or a sub-class, or `null` if no\n   error occurred\n * `varbinds` - Array of varbinds, will not be provided if an error occurred\n\nThe varbind in position N in the `varbinds` array will correspond to the\nvarbind in position N in the `varbinds` array in the request.  The remote host\nshould echo back varbinds and their values as specified in the request, and\nthe `varbinds` array will contain each varbind as sent back by the remote host.\n\nNormally there is no reason to use the contents of the `varbinds` parameter\nsince the varbinds are as they were sent in the request.\n\nThe following example sends a generic cold-start inform to a remote host,\nit does not include any varbinds:\n\n    session.inform (snmp.TrapType.ColdStart, function (error) {\n        if (error)\n            console.error (error);\n    });\n\nThe following example sends an enterprise specific inform to a remote host,\nand includes two enterprise specific varbinds:\n\n    var informOid = \"1.3.6.1.4.1.2000.1\";\n    \n    var varbinds = [\n        {\n            oid: \"1.3.6.1.4.1.2000.2\",\n            type: snmp.ObjectType.OctetString,\n            value: \"Periodic hardware self-check\"\n        },\n        {\n            oid: \"1.3.6.1.4.1.2000.3\",\n            type: snmp.ObjectType.OctetString,\n            value: \"hardware-ok\"\n        }\n    ];\n    \n    // Override sysUpTime, specfiying it as 10 seconds...\n    var options = {upTime: 1000};\n    session.inform (informOid, varbinds, options, function (error) {\n        if (error)\n            console.error (error);\n    });\n\n## session.set (varbinds, callback)\n\nThe `set()` method sets the value of one or more OIDs.\n\nThe `varbinds` parameter is an array of varbind objects. The `callback`\nfunction is called once the request is complete.  The following arguments will\nbe passed to the `callback` function:\n\n * `error` - Instance of the `Error` class or a sub-class, or `null` if no\n   error occurred\n * `varbinds` - Array of varbinds, will not be provided if an error occurred\n\nThe varbind in position N in the `varbinds` array will correspond to the\nvarbind in position N in the `varbinds` array in the request.  The remote host\nshould echo back varbinds and their values as specified in the request unless\nan error occurred.  The `varbinds` array will contain each varbind as sent\nback by the remote host.\n\nEach varbind must be checked for an error condition using the\n`snmp.isVarbindError()` function when using SNMP version 2c.\n\nThe following example sets the value of the sysName (`1.3.6.1.2.1.1.4.0`) and\nsysLocation (`1.3.6.1.2.1.1.6.0`) OIDs:\n\n    var varbinds = [\n        {\n            oid: \"1.3.6.1.2.1.1.5.0\",\n            type: snmp.ObjectType.OctetString,\n            value: \"host1\"\n        }, {\n            oid: \"1.3.6.1.2.1.1.6.0\",\n            type: snmp.ObjectType.OctetString,\n            value: \"somewhere\"\n        }\n    ];\n    \n    session.set (varbinds, function (error, varbinds) {\n        if (error) {\n            console.error (error.toString ());\n        } else {\n            for (var i = 0; i < varbinds.length; i++) {\n                // for version 1 we can assume all OIDs were successful\n                console.log (varbinds[i].oid + \"|\" + varbinds[i].value);\n            \n                // for version 2c we must check each OID for an error condition\n                if (snmp.isVarbindError (varbinds[i]))\n                    console.error (snmp.varbindError (varbinds[i]));\n                else\n                    console.log (varbinds[i].oid + \"|\" + varbinds[i].value);\n            }\n        }\n    });\n\n## session.subtree (oid, [maxRepetitions], feedCallback, doneCallback)\n\nThe `subtree()` method fetches the value for all OIDs lexicographically\nfollowing a specified OID in the MIB tree which have the specified OID as\nthere base.  For example, the OIDs sysName (`1.3.6.1.2.1.1.5.0`) and\nsysLocation (`1.3.6.1.2.1.1.6.0`) both have the same base system\n(`1.3.6.1.2.1.1`) OID.\n\nFor SNMP version 1 repeated `get()` calls are made until the one of the\nreturned OIDs does not use the specified OID as its base.  For SNMP version\n2c repeated `getBulk()` calls are made until the one of the returned OIDs\ndoes no used the specified OID as its base.\n\nThe `oid` parameter is an OID string.  The optional `maxRepetitions` parameter\nis passed to `getBulk()` requests when SNMP version 2c is being used.\n\nThis method will not call a single callback once all OID values are fetched.\nInstead the `feedCallback` function will be called each time a response is\nreceived from the remote host.  The following arguments will be passed to the\n`feedCallback` function:\n\n * `varbinds` - Array of varbinds, and will contain at least one varbind\n\nEach varbind must be checked for an error condition using the\n`snmp.isVarbindError()` function when using SNMP version 2c.\n\nOnce at least one of the returned OIDs does not use the specified OID as its\nbase, or an error has occurred, the `doneCallback` function will be called.\nThe following arguments will be passed to the `doneCallback` function:\n\n * `error` - Instance of the `Error` class or a sub-class, or `null` if no\n   error occurred\n\nOnce the `doneCallback` function has been called the request is complete and\nthe `feedCallback` function will no longer be called.\n\nIf the `feedCallback` function returns a `true` value when called no more\n`get()` or `getBulk()` method calls will be made and the `doneCallback` will\nbe called.\n\nThe following example fetches all OIDS under the system (`1.3.6.1.2.1.1`) OID:\n\n    var oid = \"1.3.6.1.2.1.1\";\n    \n    function doneCb (error) {\n        if (error)\n            console.error (error.toString ());\n    }\n    \n    function feedCb (varbinds) {\n        for (var i = 0; i < varbinds.length; i++) {\n            if (snmp.isVarbindError (varbinds[i]))\n                console.error (snmp.varbindError (varbinds[i]));\n            else\n                console.log (varbinds[i].oid + \"|\" + varbinds[i].value);\n        }\n    }\n    \n    var maxRepetitions = 20;\n    \n    // The maxRepetitions argument is optional, and will be ignored unless using\n    // SNMP verison 2c\n    session.subtree (oid, maxRepetitions, feedCb, doneCb);\n\n## session.table (oid, [maxRepetitions], callback)\n\nThe `table()` method fetches the value for all OIDs lexicographically\nfollowing a specified OID in the MIB tree which have the specified OID as\nthere base, much like the `subtree()` method.\n\nThis method is designed to fetch conceptial tables, for example the ifTable\n(`1.3.6.1.2.1.2.2`) table.  The values for returned varbinds will be structured\ninto objects to represent conceptual rows.  Each row is then placed into an\nobject with the rows index being the key, e.g.:\n\n    var table = {\n        // Rows keyed by ifIndex (1 and 2 are shown)\n        1: {\n            // ifDescr (column 2) and ifType (columnd 3) are shown\n            2: \"interface-1\",\n            3: 6,\n            ...\n        },\n        2: {\n            2: \"interface-2\",\n            3: 6,\n            ...\n        },\n        ...\n    }\n\nInternally this method calls the `subtree()` method to obtain the subtree of\nthe specified table.\n\nThe `oid` parameter is an OID string.  If an OID string is passed which does\nnot represent a table the resulting object produced to hold table data will be\nempty, i.e. it will contain no indexes and rows.  The optional\n`maxRepetitions` parameter is passed to the `subtree()` request.\n\nThe `callback` function will be called once the entire table has been fetched.\nThe following arguments will be passed to the `callback` function:\n\n * `error` - Instance of the `Error` class or a sub-class, or `null` if no\n   error occurred\n * `table` - Object containing object references representing conceptual\n   rows keyed by index (e.g. for the ifTable table rows are keyed by ifIndex),\n   each row object will contain values keyed by column number, will not be\n   provided if an error occurred\n\nIf an error occurs with any varbind returned by `subtree()` no table will be\npassed to the `callback` function.  The reason for failure, and the related\nOID string (as returned from a call to the `snmp.varbindError()` function),\nwill be passed to the `callback` function in the `error` argument as an\ninstance of the `RequestFailedError` class.\n\nThe following example fetches the ifTable (`1.3.6.1.2.1.2.2`) table:\n\n    var oid = \"1.3.6.1.2.1.2.2\";\n    \n    function sortInt (a, b) {\n        if (a > b)\n            return 1;\n        else if (b > a)\n            return -1;\n        else\n            return 0;\n    }\n    \n    function responseCb (error, table) {\n        if (error) {\n            console.error (error.toString ());\n        } else {\n            // This code is purely used to print rows out in index order,\n            // ifIndex's are integers so we'll sort them numerically using\n            // the sortInt() function above\n            var indexes = [];\n            for (index in table)\n                indexes.push (parseInt (index));\n            indexes.sort (sortInt);\n            \n            // Use the sorted indexes we've calculated to walk through each\n            // row in order\n            for (var i = 0; i < indexes.length; i++) {\n                // Like indexes we sort by column, so use the same trick here,\n                // some rows may not have the same columns as other rows, so\n                // we calculate this per row\n                var columns = [];\n                for (column in table[indexes[i]])\n                    columns.push (parseInt (column));\n                columns.sort (sortInt);\n                \n                // Print index, then each column indented under the index\n                console.log (\"row for index = \" + indexes[i]);\n                for (var j = 0; j < columns.length; j++) {\n                    console.log (\"   column \" + columns[j] + \" = \"\n                            + table[indexes[i]][columns[j]]);\n                }\n            }\n        }\n    }\n    \n    var maxRepetitions = 20;\n    \n    // The maxRepetitions argument is optional, and will be ignored unless using\n    // SNMP verison 2c\n    session.table (oid, maxRepetitions, responseCb);\n\n## session.tableColumns (oid, columns, [maxRepetitions], callback)\n\nThe `tableColumns()` method implements the same interface as the `table()`\nmethod.  However, only the columns specified in the `columns` parameter will\nbe in the resulting table.\n\nThis method should be used when only selected columns are required, and\nwill be many times faster than the `table()` method since a much smaller\namount of data will be fected.\n\nThe following example fetches the ifTable (`1.3.6.1.2.1.2.2`) table, and\nspecifies that only the ifDescr (`1.3.6.1.2.1.2.2.1.2`) and ifPhysAddress\n(`1.3.6.1.2.1.2.2.1.6`) columns should actually be fetched:\n\n    var oid = \"1.3.6.1.2.1.2.2\";\n    var columns = [2, 6];\n    \n    function sortInt (a, b) {\n        if (a > b)\n            return 1;\n        else if (b > a)\n            return -1;\n        else\n            return 0;\n    }\n    \n    function responseCb (error, table) {\n        if (error) {\n            console.error (error.toString ());\n        } else {\n            // This code is purely used to print rows out in index order,\n            // ifIndex's are integers so we'll sort them numerically using\n            // the sortInt() function above\n            var indexes = [];\n            for (index in table)\n                indexes.push (parseInt (index));\n            indexes.sort (sortInt);\n            \n            // Use the sorted indexes we've calculated to walk through each\n            // row in order\n            for (var i = 0; i < indexes.length; i++) {\n                // Like indexes we sort by column, so use the same trick here,\n                // some rows may not have the same columns as other rows, so\n                // we calculate this per row\n                var columns = [];\n                for (column in table[indexes[i]])\n                    columns.push (parseInt (column));\n                columns.sort (sortInt);\n                \n                // Print index, then each column indented under the index\n                console.log (\"row for index = \" + indexes[i]);\n                for (var j = 0; j < columns.length; j++) {\n                    console.log (\"   column \" + columns[j] + \" = \"\n                            + table[indexes[i]][columns[j]]);\n                }\n            }\n        }\n    }\n    \n    var maxRepetitions = 20;\n    \n    // The maxRepetitions argument is optional, and will be ignored unless using\n    // SNMP verison 2c\n    session.tableColumns (oid, columns, maxRepetitions, responseCb);\n\n## session.trap (typeOrOid, [varbinds], [agentAddrOrOptions], callback)\n\nThe `trap()` method sends a SNMP trap.\n\nThe `typeOrOid` parameter can be one of two types; one of the constants\ndefined in the `snmp.TrapType` object (excluding the\n`snmp.TrapType.EnterpriseSpecific` constant), or an OID string.\n\nFor SNMP version 1 when a constant is specified the following fields are set in\nthe trap:\n\n * The enterprise field is set to the OID `1.3.6.1.4.1`\n * The generic-trap field is set to the constant specified\n * The specific-trap field is set to 0\n\nWhen an OID string is specified the following fields are set in the trap:\n\n * The final decimal is stripped from the OID string and set in the\n   specific-trap field\n * The remaining OID string is set in the enterprise field\n * The generic-trap field is set to the constant\n   `snmp.TrapType.EnterpriseSpecific`\n\nIn both cases the time-stamp field in the trap PDU is set to the value\nreturned by the `process.uptime ()` function multiplied by `100`.\n\nSNMP version 2c messages are quite different in comparison with version 1.\nThe version 2c trap has a much simpler format, simply a sequence of varbinds.\nThe first varbind to be placed in the trap message will be for the\n`sysUptime.0` OID (`1.3.6.1.6.3.1.1.4.1.0`).  The value for this varbind will\nbe the value returned by the `process.uptime ()` function multiplied by 100\n(this can be overridden by providing `upTime` in the optional `options`\nparameter, as documented below).\n\nThis will be followed by a second varbind for the `snmpTrapOID.0` OID\n(`1.3.6.1.6.3.1.1.4.1.0`).  The value for this will depend on the `typeOrOid`\nparameter.  If a constant is specified the trap OID for the constant\nwill be used as supplied for the varbinds value, otherwise the OID string\nspecified will be used as is for the value of the varbind.\n\nThe optional `varbinds` parameter is an array of varbinds to include in the\ntrap, and defaults to the empty array `[]`.\n\nThe optional `agentAddrOrOptions` parameter can be one of two types; one is\nthe IP address used to populate the agent-addr field for SNMP version 1 type\ntraps, and defaults to `127.0.0.1`, or an object, and can contain the\nfollowing items:\n\n * `agentAddr` - IP address used to populate the agent-addr field for SNMP\n   version 1 type traps, and defaults to `127.0.0.1`\n * `upTime` - Value of the `sysUptime.0` OID (`1.3.6.1.6.3.1.1.4.1.0`) in the\n   trap, defaults to the value returned by the `process.uptime ()` function\n   multiplied by 100\n\n**NOTE** When using SNMP version 2c the `agentAddr` parameter is ignored if\nspecified since version 2c trap messages do not have an agent-addr field.\n\nThe `callback` function is called once the trap has been sent, or an error\noccurred.  The following arguments will be passed to the `callback` function:\n\n * `error` - Instance of the `Error` class or a sub-class, or `null` if no\n   error occurred\n\nThe following example sends an enterprise specific trap to a remote host using\na SNMP version 1 trap, and includes the sysName (`1.3.6.1.2.1.1.5.0`) varbind\nin the trap.  Before the trap is sent the `agentAddr` field is calculated using\nDNS to resolve the hostname of the local host:\n\n    var enterpriseOid = \"1.3.6.1.4.1.2000.1\"; // made up, but it may be valid\n    \n    var varbinds = [\n        {\n            oid: \"1.3.6.1.2.1.1.5.0\",\n            type: snmp.ObjectType.OctetString,\n            value: \"host1\"\n        }\n    ];\n    \n    dns.lookup (os.hostname (), function (error, agentAddress) {\n        if (error) {\n            console.error (error);\n        } else {\n            // Override sysUpTime, specfiying it as 10 seconds...\n            var options = {agentAddr: agentAddress, upTime: 1000};\n            session.trap (enterpriseOid, varbinds, agentAddress,\n                    function (error) {\n                if (error)\n                    console.error (error);\n            });\n        }\n    });\n\nThe following example sends a generic link-down trap to a remote host using a\nSNMP version 1 trap, it does not include any varbinds or specify the\n`agentAddr` parameter:\n\n    session.trap (snmp.TrapType.LinkDown, function (error) {\n        if (error)\n            console.error (error);\n    });\n\nThe following example sends an enterprise specific trap to a remote host using\na SNMP version 2c trap, and includes two enterprise specific varbinds:\n\n    var trapOid = \"1.3.6.1.4.1.2000.1\";\n    \n    var varbinds = [\n        {\n            oid: \"1.3.6.1.4.1.2000.2\",\n            type: snmp.ObjectType.OctetString,\n            value: \"Hardware health status changed\"\n        },\n        {\n            oid: \"1.3.6.1.4.1.2000.3\",\n            type: snmp.ObjectType.OctetString,\n            value: \"status-error\"\n        }\n    ];\n    \n    // version 2c should have been specified when creating the session\n    session.trap (trapOid, varbinds, function (error) {\n        if (error)\n            console.error (error);\n    });\n\n## session.walk (oid, [maxRepetitions], feedCallback, doneCallback)\n\nThe `walk()` method fetches the value for all OIDs lexicographically following\na specified OID in the MIB tree.\n\nFor SNMP version 1 repeated `get()` calls are made until the end of the MIB\ntree is reached.  For SNMP version 2c repeated `getBulk()` calls are made\nuntil the end of the MIB tree is reached.\n\nThe `oid` parameter is an OID string.  The optional `maxRepetitions` parameter\nis passed to `getBulk()` requests when SNMP version 2c is being used.\n\nThis method will not call a single callback once all OID values are fetched.\nInstead the `feedCallback` function will be called each time a response is\nreceived from the remote host.  The following arguments will be passed to the\n`feedCallback` function:\n\n * `varbinds` - Array of varbinds, and will contain at least one varbind\n\nEach varbind must be checked for an error condition using the\n`snmp.isVarbindError()` function when using SNMP version 2c.\n\nOnce the end of the MIB tree has been reached, or an error has occurred, the\n`doneCallback` function will be called.  The following arguments will be\npassed to the `doneCallback` function:\n\n * `error` - Instance of the `Error` class or a sub-class, or `null` if no\n   error occurred\n\nOnce the `doneCallback` function has been called the request is complete and\nthe `feedCallback` function will no longer be called.\n\nIf the `feedCallback` function returns a `true` value when called no more\n`get()` or `getBulk()` method calls will be made and the `doneCallback` will\nbe called.\n\nThe following example walks to the end of the MIB tree starting from the\nifTable (`1.3.6.1.2.1.2.2`) OID:\n\n    var oid = \"1.3.6.1.2.1.2.2\";\n    \n    function doneCb (error) {\n        if (error)\n            console.error (error.toString ());\n    }\n    \n    function feedCb (varbinds) {\n        for (var i = 0; i < varbinds.length; i++) {\n            if (snmp.isVarbindError (varbinds[i]))\n                console.error (snmp.varbindError (varbinds[i]));\n            else\n                console.log (varbinds[i].oid + \"|\" + varbinds[i].value);\n        }\n    }\n    \n    var maxRepetitions = 20;\n    \n    // The maxRepetitions argument is optional, and will be ignored unless using\n    // SNMP verison 2c\n    session.walk (oid, maxRepetitions, feedCb, doneCb);\n\n# Example Programs\n\nExample programs are included under the modules `example` directory.\n\n# Bugs & Known Issues\n\nNone, yet!\n\nBug reports should be sent to <stephen.vickers.sv@gmail.com>.\n\n# Changes\n\n## Version 1.0.0 - 14/01/2013\n\n * Initial release including only SNMP version 1 support\n\n## Version 1.1.0 - 20/01/2013\n\n * Implement SNMP version 2c support\n\n## Version 1.1.1 - 21/01/2013\n\n * Correct name used in example `require()` call to include this module\n\n## Version 1.1.2 - 22/01/2013\n\n * Implement `subtree()`, `table()` and `walk()` methods\n * Support IPv6 (added `transport` option to the `createSession()` function)\n * Re-order some methods in README.md\n\n## Version 1.1.3 - 27/01/2013\n\n * Fix some typos and grammar errors in README.md\n * Example `snmp-table` program had `snmp-subtree` in its usage message\n * Implement example `snmp-tail` program to constantly poll for an OIDs value\n * Add note to README.md about the ability to stop the `walk()` and `subtree()`\n   methods by returning `true`\n\n## Version 1.1.4 - 29/01/2013\n\n * Fix incorrect usage of the term \"NPM\" in README.md, should be \"npm\"\n\n## Version 1.1.5 - 05/02/2013\n\n * The `transport` option to `createSession()` was not used\n\n## Version 1.1.6 - 12/04/2013\n\n * Implement `tableColumns()` method\n * Added example program `snmp-table-columns.js`\n * Correct name of the `table` parameter to the `table()` callback\n * Slight OID comparison performance enhancement\n\n## Version 1.1.7 - 11/05/2013\n\n * Use MIT license instead of GPL\n\n## Version 1.1.8 - 22/06/2013\n\n * Added the example program `cisco-device-inventory.js`\n * Receive `Trap failed: TypeError: value is out of bounds` when sending\n   traps using SNMP version 2c\n\n## Version 1.1.9 - 03/11/2013\n\n * Corrected a few instances of the parameter named `requestCallback` to some\n   methods in the README.md file which should have been `feedCallback`\n * Null type is used for varbinds with a 0 value\n * Correct instances of snmp.Type to snmp.ObjectType in the README.md file\n\n## Version 1.1.10 - 01/12/2013\n\n * Error handler in the `dgram.send()` callback in the `send()` method was\n   creating a new instance of the `Error` class from the `error` parameter, but\n   it was already an instance of the `Error` class (thanks Ray Solomon)\n * Add stack traces to Error classes exported by this module (thanks Ray\n   Solomon)\n * Allow users to specify `0` retries when creating a session (thanks Ray\n   Solomon)\n * Update the list of SNMP version 1 related RFCs we adhere to in the\n   `Standards Compliance` section of the README.md file\n\n## Version 1.1.11 - 27/12/2013\n\n * Add `sourceAddress` and `sourcePort` optional options to the\n   `Session` classes `createSession()` method, which can be used to control\n   from which IP address and port messages should be sent\n * Allow users to specify sysUpTime for SNMP traps and informs\n\n## Version 1.1.12 - 02/04/2014\n\n * The `agentAddr` attribute is not used when passed in the `options` object\n   to the `trap()` method\n\n## Version 1.1.13 - 12/08/2014\n\n * Not catching error events for the UDP socket returned from the\n   `dgram.createSocket()` function\n * Some request methods do not copy arguments which results in sometimes\n   unexpected behaviour\n * Use a single UDP socket for all requests in a single SNMP session\n * Use a try/catch block in the timer callback in the `Session.send()` method\n * The `Session` can now emit an `error` event to catch errors in a sessions\n   underlying UDP socket\n * The `Session` can now emit a `close` event to catch close events from a\n   sessions underlying UDP socket, which results in the cancellation of\n   all outstanding requests\n * Added a `close()` method to `Session` to close a sessions underlying UDP\n   socket, which results a `close` event\n * Signed integers are treated as unsigned integers when parsing response\n   messages\n\n## Version 1.1.14 - 22/09/2015\n\n * Host repository on GitHub\n\n## Version 1.1.15 - 08/02/2016\n\n * When parsing an invalid response an exception in message parsing does not\n   interupt response processing\n * Incorrectly passing `req` object in call to `req.responseCb` when handling\n   errors during response processing\n\n## Version 1.1.16 - 29/02/2016\n\n * Address a number of issues detected with the Mocha test suite by a user\n\n## Version 1.1.17 - 21/03/2016\n\n * Correct reference to non-existant `req` variable in the `Session` objects\n   constructor (should be `this`)\n\n## Version 1.1.18 - 15/05/2015\n\n * Correct argument number and names to the `snmp.createSession()` function\n * Add missing braces to an example in the README.md file\n\n## Version 1.1.19 - 26/08/2016\n\n * Remove 64bit integer check to ensure a maximum of 8 bytes are given in send\n   and received messages\n\n# Roadmap\n\nIn no particular order:\n\n * Use a single UDP socket for multiple sessions?\n * SNMP agent (i.e. server)\n * SNMP trap/inform receiver\n * SNMP version 3\n\nSuggestions and requirements should be sent to <stephen.vickers.sv@gmail.com>.\n\n# License\n\nCopyright (c) 2013 Stephen Vickers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n# Author\n\nStephen Vickers <stephen.vickers.sv@gmail.com>\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/stephenwvickers/node-net-snmp/issues"
  },
  "_id": "net-snmp@1.1.19",
  "dist": {
    "shasum": "0b9794f5dc1928e6bda06e05809cb8650723e694"
  },
  "_from": "net-snmp@",
  "_resolved": "https://registry.npmjs.org/net-snmp/-/net-snmp-1.1.19.tgz"
}
