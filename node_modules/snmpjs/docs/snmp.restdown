---
title: Introduction to SNMP and snmpjs
markdown2extras: wiki-tables, code-friendly
apisections:
---

# Introduction to SNMP and snmpjs

The Simple Network Management Protocol (SNMP) has two strikes against it right
from the outset: its name includes the toxicity warning keyword 'simple', and
its specification consists of literally dozens of RFCs (many now on their second
or third revisions) that read like they were written by lawyers.  Bit-twiddling
lawyers.  If you already know SNMP well, you can probably skip this document and
go straight to the snmpjs API reference.  If not, read on for a condensed --
some might even say oversimplified -- explanation of just what snmpjs allows you
to do.

# In a Nutshell

SNMP defines a typed key/value data store backed by the actual state of a
running computer, and a remote retrieval mechanism using datagrams (UDP,
basically).  That's it.  Because the early (and still most commonly deployed)
variants included no meaningful authentication or privacy mechanisms, the
database is often made read-only, and because the contents of the database
represent the state of a live system, the database contents are normally treated
by clients as uncacheable.  Without reading any specifications or the source
code to an implementation, it's easy to understand why its authors considered
the protocol to be simple: it is.

# Basic Terminology

There are a number of other terms used in the standards, but these are the
essential ones:

- The database itself is called the *Management Information Base (MIB)*.
- The entries in the database that describe data are called *object types*; the
  data items themselves are called *instances* of these object types.
- The piece of software that brokers requests for data (the "server") and
  generates telemetry when data values change is called an *agent*.
- The piece of software that makes requests (the "client") is called a
  *management application* or *manager*.
- Finally, network hosts with agents or managers installed are called
  *entities*.

# Access Control

In the original SNMP specification, access to objects and their data was to be
controlled by the exchange of a simple string, essentially a plaintext password,
called the community.  The intent was that all management applications and
agents in an administrative domain would be configured as part of a single
community and would exchange and verify the same community name.  This
mechanism, while extremely weak, is still in widespread use, though other,
stronger, mechanisms have since been proposed and implemented.

There are three main versions of SNMP in common deployment: 1, 2c, and 3.
SNMPv1 is largely obsolete, replaced by the mostly-compatible and very similar
v2c, so-named because it refers to "community-based v2" and preserves the same
extremely weak but simple authentication mechanism present in v1.  The original
proposal for SNMPv2 incorporated a complex and unpopular security mechanism,
eventually dropped in favour of v2c but later implemented as a component of v3.
Nearly all SNMP management applications and agents support v2c, and, to the
extent that they differ, v1 as well.  While there are several software packages
available that support SNMPv3, it is not widely deployed.  The snmpjs software
supports v1 and v2c only; it can neither parse nor generate a v3 message, and
lacks utility routines for manipulating v3-specific objects.

# The Management Information Base (MIB)

The term MIB is used interchangeably to mean either the entire database an SNMP
entity makes available to management applications, or a thematically unified
subset of that information.  For example, standards documents typically use "the
MIB" to mean the whole database, while administrators frequently speak of
support for "a MIB" to mean a subset of that data relevant to a particular
application or system component ("the Sun FMA MIB"), or a text file that
describes its format ("SUN-FM-MIB.mib").  It is important to note that the
contents of such a file are purely advisory; management applications rely on
them for metadata about what objects are likely to be accessible, how they
should be accessed, and how their data contents should be presented, but there
is no guarantee that an agent or management application will adhere to the
specified syntax when transmitting a data object.

The MIB contains a hierarchically-named set of objects, each of which may have
zero or more instances.  An instance is an object with which a single data item
is associated; each data item has a type and a value.  An object may have no
instances either because it is specified to serve only as a hierarchical
container for other objects or because the SNMP entity does not contain anything
of the type represented by the object.  For example, a network host with no
storage devices would have no instances of an object that represents a disk
drive.  The object namespace is an ordered sequence of integers in the range
\[0, 255\], and such a sequence is called an object identifier or OID.  OIDs are
typically written as strings in dotted-decimal notation; e.g., `1.3.6.1`.  Each
component integer in the hierarchy typically has a convenient string name; in
this example, the name is `iso.org.dod.internet`, which for historical reasons
happens to be the root of most of the interesting parts of the OID space.

Objects which may have instances come in two basic flavours: scalar and tabular.
A scalar object has at most one instance, always named 0 (if it exists).  For
example, the nodename of a network host is available in in instance named
mib-2.system.sysName.0.

A tabular object consists of a subtree of objects whose leaves are instances
corresponding to rows in the table.  Such a subtree usually consists of an
object referring to the table type, a single child object referring to a type
specifying the format of each table entry, which in turn has one child object
referring to a type specifying the format of each column in the table for which
data items are available.  For example, a table in which each row describes a
software module and each module is described by an index, a name, and a version
might be specified as:

			sunFmModuleTable
				|
			sunFmModuleEntry
			/	|	\
	sunFmModuleIndex sunFmModuleName sunFmModuleVersion

Each of these columnar objects would have one child for each instance that
exists on the system.  Each of the objects corresponding to the same row in the
table has the same name beneath the column identifier.  Therefore, if there are
two rows named 1 and 2, the following instances would exist within the MIB, each
with a data item associated with it:

	sunFmModuleTable.sunFmModuleEntry.sunFmModuleIndex.1
	sunFmModuleTable.sunFmModuleEntry.sunFmModuleIndex.2
	sunFmModuleTable.sunFmModuleEntry.sunFmModuleName.1
	sunFmModuleTable.sunFmModuleEntry.sunFmModuleName.2
	sunFmModuleTable.sunFmModuleEntry.sunFmModuleVersion.1
	sunFmModuleTable.sunFmModuleEntry.sunFmModuleVersion.2

There are three general approaches to tabular instance naming (that is,
indexing) in common use:

- Integer indices, normally starting from 1 (i.e., the table is an
  array)

- Complex identifiers such as an IP address or string (i.e., the table
  is an associative array, hash, or object)

- A concatentation of multiple IP addresses, port numbers, strings, or
  other data that constructs a virtual multidimensional table (i.e., the
  table is a nested object or a content-addressable data store).

Because each instance in the MIB references a single scalar data item, it is
possible (and common) to use complex instance identifiers to form a
content-addressable data store by using several of the columns within a
conceptual table to form the name of an instance rather than (or in addition to)
providing the values in those columns as data items within instances.  The
canonical example is the routing table, which is indexed by the aggregation of
the destination prefix and mask just as it is inside the networking stack
itself.

Further examples, descriptions, and specifications of tabular and scalar data
structures can be found in [RFC 1155][], [RFC 1212][], [RFC 2578][],
[RFC 3416][], and the many documents specifying the format of various portions
of the MIB.

# Messages and PDUs

An SNMP message is a datagram, almost always implemented over UDP.  Each message
contains a small amount of metadata and exactly one Protocol Data Units (PDU).
A PDU contains an operation type, some metadata, and possibly some object
data.  There are four basic types of operation: requests, responses, traps, and
reports.  Reports have a standard role only in SNMPv3 and are not discussed
here.  See [RFC 3412][] for details on reports.

Within any PDU type, an object, including its name (OID) and possibly its data
value, is called a variable binding or varbind.  For practical purposes, this is
best thought of simply as a triple (name, type, value).

### Requests

There are four types of requests that are generated by management applications
and sent to agents on managed entities: Get, GetNext, GetBulk, and Set.  As
their names imply, three of these requests attempt to retrieve existing data and
one attempts to modify it.  Again, since the "model" in SNMP is a live system,
modifying the contents of the database modifies the system and affects its
operation.

The Get and Set requests retrieve or modify a single data item, specified by an
OID.  The data item may be scalar or tabular data, but it must itself be scalar
(that is, these requests cannot operate on multiple data items, even if they are
logically contiguous or part of a tabular structure).  In general, if the OID
names a scalar object definition rather than its instance, the request is
treated as if it referenced the instance.  This may not apply to OIDs that name
tabular object definitions such as entries or columns.

The GetNext request is similar to the Get request in that it operates on a
single data item.  Unlike a Get request, however, the GetNext request operates
on the object whose name *immediately follows* the object named in the request.
This allows a management application to traverse all or part of the MIB without
knowing the names of all the objects it contains.

The GetBulk request works like a list of Get and/or GetNext requests submitted
as a single request, and expects the results of those requests in a single
response.  This was intended to allow more rapid processing of tabular data; by
requesting, for example, the next 10 data items following each of the objects
naming columns in a table, a management client could make fewer requests to
retrieve the same data, and an agent could respond with multiple pieces of data
that are likely to be stored together anyway without having to look them up
multiple times.  Unfortunately, this is less useful than it sounds, because the
amount of data that can be exchanged in a single transaction is limited by the
size of datagrams that can be transported between the managed entity and the
management host.  That may be 1500 bytes, or even less in some cases, and is
always limited to just under 64kB in IPv4.  While the standard makes an
allowance for this by requiring that an error message be returned if the
response would be too large to transport, it is often impossible to know how
large a message can be sent to the requesting host.

### Responses

Responses are generated by agents when they receive requests.  A response PDU
has a 1-1 mapping to the request PDU to which it pertains.  It contains metadata
such as error state and may include one or more varbinds describing the
result(s) of the requested operation(s).

### Traps

There are three types of trap: Trap, SNMPv2_Trap, and InformRequest.  All three
may be generated by any entity and serve the purpose of providing notification
of an asynchronous event.  The original SNMPv1 Trap type is obsolete; the SNMPv2
Trap performs the same function but uses a different on-wire format.  An
InformRequest is very similar to an SNMPv2 Trap, but will be periodically
retransmitted until the transmitter receives an acknowledgement Response from
the recipient (both of the older Trap types are fire-and-forget).

Any of the traps may include varbinds that contain object data items relevant to
the event that occurred.

# Agents

An agent is responsible for receiving requests, delegating them to appropriate
software, and assembling and transmitting responses.  Agents normally listen on
UDP port 161.  There are a wide variety of mechanisms by which an agent may
delegate requests; the most common are:

- Direct incorporation, in which the agent contains one or more software
  components that satisfy requests from data contained within the agent
  itself.  This is commonly used for portions of the MIB that are
  introspective in nature; that is, which concern the functioning of the
  agent itself.  Some agent software also directly incorporates commonly
  used portions of the MIB defined by standards.

- Loadable modules, in which the agent loads at runtime a set of
  software components specified by the administrator.  Each module
  handles a subset of the MIB and executes in the same address space or
  virtual execution environment as the rest of the agent.

- AgentX, a mechanism defined by [RFC 2741][] for delegating portions of
  the MIB to subagents that do not directly handle SNMP communication
  but instead communicate with the master agent using a separate
  protocol.  These subagents may be part of separate processes or
  execution environments, or may be contained within the same process or
  execution environment that contains the master agent.

- Proprietary RPC mechanisms that delegate portions of the MIB to other
  processes, execution environments, or even separate virtual or
  physical hosts.

The snmpjs software supports a loadable module mechanism using standard Node.js
functionality.  This mechanism could be used to implement either of the dynamic
mechanisms, but at present there is no support for communicating with subagents
that are not part of the Node.js process.

# Trap Generators

Any SNMP entity may generate traps, but in the common use case, managed entities
containing agents will also generate traps.  Because, prior to the introduction
of Inform functionality in SNMPv3, traps were not acknowledged and datagram
delivery is unreliable, trap generation by itself is usually considered
insufficient.  It must be supplemented by an agent providing access to relevant
portions of the MIB so that a management application can poll the entity for its
status in case a trap was not generated or delivered.  In addition, it is likely
that the data items included in a trap's varbinds will be a subset of those
available in the managed entity's MIB.

The agent itself, in most software architectures, will not actively poll the
live system unless requests are being received, and is unlikely to be aware of
conditions that require the generation of a trap.  Therefore, trap generation is
typically incorporated into other software components in the managed entity such
as daemons that provide critical services or monitor the health of the system.
The snmpjs package provides trap generator functionality that can be
incorporated into any Node.js application.

# Management Applications and Trap Listeners

These components of SNMP infrastructure generate requests for data items and
direct them to agents on managed entities throughout the network, then receive
and present that information to network administrators.  They also typically
receive traps from the same or an overlapping set of managed entities and
present information about them as well.  Implementations vary widely, from
simple single-purpose scripts that log events, to packages of discrete utilities
that can perform many functions, to large-scale shrinkwrapped software that
incorporates SNMP as part of a comprehensive management system with multiple
presentation choices.

The snmpjs package includes some simple example utilities that illustrate how to
use the library to build management applications.  It does not include a
full-featured SNMP management application, nor does it include a comprehensive
suite of utilities appropriate for managing a network.

---
[RFC 1155]: http://www.ietf.org/rfc/rfc1155.txt
[RFC 1212]: http://www.ietf.org/rfc/rfc1212.txt
[RFC 2578]: http://www.ietf.org/rfc/rfc2578.txt
[RFC 2741]: http://www.ietf.org/rfc/rfc2741.txt
[RFC 3412]: http://www.ietf.org/rfc/rfc3412.txt
[RFC 3416]: http://www.ietf.org/rfc/rfc3416.txt
